<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Xuefeng Xu</title>
<link>https://xuefeng-xu.github.io/blog/</link>
<atom:link href="https://xuefeng-xu.github.io/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>Xuefeng Xu&#39;s Homepage</description>
<generator>quarto-1.6.39</generator>
<lastBuildDate>Sun, 13 Apr 2025 23:00:00 GMT</lastBuildDate>
<item>
  <title>Power Transform</title>
  <link>https://xuefeng-xu.github.io/blog/powertransform.html</link>
  <description><![CDATA[ 





<p>Power transforms are parametric methods that convert data into a Gaussian-like distribution. Two widely used transformations in this category are the Box-Cox <span class="citation" data-cites="Box1964">(Box and Cox 1964)</span> and Yeo-Johnson <span class="citation" data-cites="Yeo2000">(I. Yeo and Johnson 2000)</span> methods, both of which rely on a single parameter <img src="https://latex.codecogs.com/png.latex?%5Clambda">.</p>
<section id="two-transformations" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="two-transformations"><span class="header-section-number">1</span> Two Transformations</h2>
<p>The Box-Cox transformation requires strictly positive data (<img src="https://latex.codecogs.com/png.latex?x%20%3E%200">) and is defined as:</p>
<p><span id="eq-box-cox"><img src="https://latex.codecogs.com/png.latex?%0A%5Cpsi_%7B%5Ctext%7BBC%7D%7D(%5Clambda,%20x)%20=%0A%5Cbegin%7Bcases%7D%0A%5Cfrac%7Bx%5E%5Clambda-1%7D%7B%5Clambda%7D%20&amp;%20%5Ctext%7Bif%20%7D%20%5Clambda%5Cneq0,%5C%5C%0A%5Cln%20x%20&amp;%20%5Ctext%7Bif%20%7D%20%5Clambda=0.%0A%5Cend%7Bcases%7D%0A%5Ctag%7B1%7D"></span></p>
<p>The Yeo-Johnson transformation generalizes Box-Cox to handle non-positive values and is defined as:</p>
<p><span id="eq-yeo-johnson"><img src="https://latex.codecogs.com/png.latex?%0A%5Cpsi_%7B%5Ctext%7BYJ%7D%7D(%5Clambda,%20x)%20=%0A%5Cbegin%7Bcases%7D%0A%5Cfrac%7B(x+1)%5E%5Clambda-1%7D%7B%5Clambda%7D%20&amp;%20%5Ctext%7Bif%20%7D%20%5Clambda%5Cneq0,x%5Cge0,%5C%5C%0A%5Cln(x+1)%20&amp;%20%5Ctext%7Bif%20%7D%20%5Clambda=0,x%5Cge0,%5C%5C%0A-%5Cfrac%7B(-x+1)%5E%7B2-%5Clambda%7D-1%7D%7B2-%5Clambda%7D%20&amp;%20%5Ctext%7Bif%20%7D%20%5Clambda%5Cneq2,x%3C0,%5C%5C%0A-%5Cln(-x+1)%20&amp;%20%5Ctext%7Bif%20%7D%20%5Clambda=2,x%3C0.%5C%5C%0A%5Cend%7Bcases%7D%0A%5Ctag%7B2%7D"></span></p>
<p>Figure&nbsp;1 visualizes these transformations across various <img src="https://latex.codecogs.com/png.latex?%5Clambda"> values.</p>
<div id="6cd1bb4d" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.special <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> boxcox</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> yeojohnson</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> power_plot(x_min, x_max, power):</span>
<span id="cb1-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> power <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BC"</span>:</span>
<span id="cb1-8">        power_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boxcox</span>
<span id="cb1-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-10">        power_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yeojohnson</span>
<span id="cb1-11"></span>
<span id="cb1-12">    eps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb1-13">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(x_min, x_max, eps)</span>
<span id="cb1-14"></span>
<span id="cb1-15">    fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb1-16">    line_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dodgerblue'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'limegreen'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mediumpurple'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>]</span>
<span id="cb1-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, lmb <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="cb1-18">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> power_func(x, lmb)</span>
<span id="cb1-19">        ax.plot(x, y, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">fr'$\lambda$=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>lmb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>line_color[idx])</span>
<span id="cb1-20">    </span>
<span id="cb1-21">    ax.set_xlabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'$x$'</span>)</span>
<span id="cb1-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> power <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BC"</span>:</span>
<span id="cb1-23">        ax.set_ylabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'$\psi_{\text</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{BC}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">}(\lambda, x)$'</span>)</span>
<span id="cb1-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-25">        ax.set_ylabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'$\psi_{\text</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{YJ}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">}(\lambda, x)$'</span>)</span>
<span id="cb1-26"></span>
<span id="cb1-27">    ax.set_xlim(x_min, x_max)</span>
<span id="cb1-28">    ax.set_ylim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb1-29"></span>
<span id="cb1-30">    ax.yaxis.set_ticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(np.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)))</span>
<span id="cb1-31">    ax.get_yticklabels()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb1-32">    ax.xaxis.set_ticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(np.arange(x_min, x_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb1-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> power <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BC"</span>:</span>
<span id="cb1-34">        ax.get_xticklabels()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb1-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-36">        ax.get_xticklabels()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb1-37"></span>
<span id="cb1-38">    ax.axhline(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>)</span>
<span id="cb1-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> power <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BC"</span>:</span>
<span id="cb1-40">        ax.axvline(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>)</span>
<span id="cb1-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-42">        ax.axvline(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>)</span>
<span id="cb1-43"></span>
<span id="cb1-44">    ax.grid()</span>
<span id="cb1-45">    ax.set_aspect(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb1-46"></span>
<span id="cb1-47">    leg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ax.legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lower right'</span>)</span>
<span id="cb1-48">    leg.get_texts()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb1-49"></span>
<span id="cb1-50">    plt.show()</span></code></pre></div>
</details>
</div>
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">power_plot(x_min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x_max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, power<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BC"</span>)</span>
<span id="cb2-2">power_plot(x_min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x_max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, power<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"YJ"</span>)</span></code></pre></div>
</details>
<div id="fig-power-transform" class="quarto-layout-panel">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-power-transform-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="quarto-layout-row">
<div id="cell-fig-box-cox" class="cell quarto-layout-cell-subref quarto-layout-cell" data-execution_count="2" data-ref-parent="fig-power-transform" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="cell-output cell-output-display quarto-layout-cell-subref" data-ref-parent="fig-power-transform">
<div id="fig-box-cox" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-box-cox-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://xuefeng-xu.github.io/blog/powertransform_files/figure-html/fig-box-cox-output-1.png" data-ref-parent="fig-power-transform" width="350" height="434" class="figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-box-cox-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Box-Cox
</figcaption>
</figure>
</div>
</div>
</div>
<div id="cell-fig-yeo-johnson" class="cell quarto-layout-cell-subref quarto-layout-cell" data-execution_count="3" data-ref-parent="fig-power-transform" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="cell-output cell-output-display quarto-layout-cell-subref" data-ref-parent="fig-power-transform">
<div id="fig-yeo-johnson" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-yeo-johnson-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://xuefeng-xu.github.io/blog/powertransform_files/figure-html/fig-yeo-johnson-output-1.png" data-ref-parent="fig-power-transform" width="443" height="434" class="figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-yeo-johnson-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(b) Yeo-Johnson
</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-power-transform-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Box-Cox and Yeo-Johnson transformations.
</figcaption>
</figure>
</div>
<p>The optimal <img src="https://latex.codecogs.com/png.latex?%5Clambda"> is typically estimated by maximizing the log-likelihood. For Box-Cox and Yeo-Johnson, the respective log-likelihood functions are:</p>
<p><span id="eq-box-cox-llf"><img src="https://latex.codecogs.com/png.latex?%0A%5Cln%5Cmathcal%7BL%7D_%7B%5Ctext%7BBC%7D%7D(%5Clambda,%20x)=(%5Clambda-1)%20%5Csum_i%5En%20%5Cln%20x_i%20-%20%5Cfrac%7Bn%7D%7B2%7D%5Cln%5Csigma%5E2_%7B%5Cpsi_%7B%5Ctext%7BBC%7D%7D%7D%0A%5Ctag%7B3%7D"></span></p>
<p><span id="eq-yeo-johnson-llf"><img src="https://latex.codecogs.com/png.latex?%0A%5Cln%5Cmathcal%7BL%7D_%7B%5Ctext%7BYJ%7D%7D(%5Clambda,%20x)=(%5Clambda-1)%20%5Csum_i%5En%20%5Ctext%7Bsgn%7D%20(x_i)%20%5Cln(%7Cx_i%7C+1)%20-%20%5Cfrac%7Bn%7D%7B2%7D%5Cln%5Csigma%5E2_%7B%5Cpsi_%7B%5Ctext%7BYJ%7D%7D%7D%0A%5Ctag%7B4%7D"></span></p>
<p>Here, <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E2_%5Cpsi"> represents the variance of the transformed data, <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BVar%7D%5B%5Cpsi(%5Clambda,x)%5D">. These log-likelihood functions are concave <span class="citation" data-cites="Kouider1995 Marchand2022">(Kouider and Chen 1995; Marchand et al. 2022)</span>, which guarantees a unique maximum. Brent’s method <span class="citation" data-cites="Brent2013">(Brent 2013)</span> is commonly employed for optimization.</p>
<div id="2a5d4eef" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.optimize <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> brent</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> max_llf(x, llf):</span>
<span id="cb3-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _neg_llf(lmb, x):</span>
<span id="cb3-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>llf(lmb, x)</span>
<span id="cb3-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> brent(_neg_llf, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(x,))</span></code></pre></div>
</div>
</section>
<section id="numerical-instabilities" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="numerical-instabilities"><span class="header-section-number">2</span> Numerical Instabilities</h2>
<p>Because both transformations involve exponentiation, they are susceptible to numerical overflow. This problem has been observed by <span class="citation" data-cites="Marchand2022">(Marchand et al. 2022)</span> and discussed in <a href="https://github.com/scikit-learn/scikit-learn/issues/23319">Scikit-learn’s GitHub Issue</a>. Below is an example illustrating the problem using a naive implementation of Equation&nbsp;3:</p>
<div id="af3f7353" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> boxcox_llf_naive(lmb, x):</span>
<span id="cb4-2">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x)</span>
<span id="cb4-3">    logx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(x)</span>
<span id="cb4-4">    logvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(np.var(boxcox(x, lmb)))</span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (lmb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(logx) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> logvar</span></code></pre></div>
</div>
<div id="9e4bb8e3" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.9</span>])</span>
<span id="cb5-2">max_llf(x, llf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>boxcox_llf_naive)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/opt/miniconda3/lib/python3.12/site-packages/numpy/core/_methods.py:176: RuntimeWarning:

overflow encountered in multiply

/opt/miniconda3/lib/python3.12/site-packages/numpy/core/_methods.py:187: RuntimeWarning:

overflow encountered in reduce
</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>156.48528753755807</code></pre>
</div>
</div>
<p>Although this returns a <img src="https://latex.codecogs.com/png.latex?%5Clambda"> value, it produces overflow warnings. A useful diagnostic is to visualize the log-likelihood curve:</p>
<div id="0461779d" class="cell" data-execution_count="7">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_llf(x, lb, ub, llf):</span>
<span id="cb8-2">    np.set_printoptions(precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb8-3">    lmb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(lb, ub, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb8-4">    ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([llf(l, x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lmb])</span>
<span id="cb8-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"llf=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ll<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-6"></span>
<span id="cb8-7">    fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb8-8">    ax.plot(lmb, ll)</span>
<span id="cb8-9">    ax.set_xlabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\lambda$"</span>)</span>
<span id="cb8-10">    ax.set_ylabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\ln\mathcal</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{L}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">(\lambda, x)$"</span>)</span>
<span id="cb8-11">    plt.show()</span></code></pre></div>
</details>
</div>
<div id="3363d178" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">plot_llf(x, lb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, ub<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, llf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>boxcox_llf_naive)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>llf=[13.684 13.697 13.711   -inf   -inf   -inf   -inf   -inf   -inf   -inf
   -inf   -inf   -inf   -inf   -inf   -inf   -inf   -inf   -inf   -inf]</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://xuefeng-xu.github.io/blog/powertransform_files/figure-html/cell-9-output-2.png" width="392" height="356" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Unfortunately, due to overflow (<code>np.inf</code> values), the log-likelihood curve cannot be visualized in the specified range, suggesting the returned <img src="https://latex.codecogs.com/png.latex?%5Clambda"> is not optimal.</p>
</section>
<section id="solution-from-the-mass-package" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="solution-from-the-mass-package"><span class="header-section-number">3</span> Solution from the MASS Package</h2>
<p>The MASS package in R <span class="citation" data-cites="Venables2002">(Venables and Ripley 2002)</span> proposes a simple yet effective trick: divide the data by its mean. This rescales the data and avoids numerical instability without affecting the optimization outcome.</p>
<div id="cdda7914" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">x_dm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.mean(x)</span>
<span id="cb11-2">max_llf(x_dm, llf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>boxcox_llf_naive)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>357.55141884289054</code></pre>
</div>
</div>
<div id="5630419a" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">plot_llf(x_dm, lb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">330</span>, ub<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">385</span>, llf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>boxcox_llf_naive)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>llf=[23.376 23.377 23.378 23.38  23.381 23.381 23.382 23.383 23.383 23.383
 23.383 23.383 23.383 23.382 23.382 23.381 23.38  23.379 23.377 23.376]</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://xuefeng-xu.github.io/blog/powertransform_files/figure-html/cell-11-output-2.png" width="392" height="356" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>To see why this works, consider the log-variance term for <img src="https://latex.codecogs.com/png.latex?%5Clambda%20%5Cne%200">:</p>
<p><span id="eq-boxcox-log-var"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cln%5Ctext%7BVar%7D%5B%5Cpsi_%7B%5Ctext%7BBC%7D%7D(%5Clambda,x)%5D%0A&amp;=%5Cln%5Ctext%7BVar%7D%5B(x%5E%5Clambda-1)/%5Clambda%5D%20%5C%5C%0A&amp;=%5Cln%5Ctext%7BVar%7D%5Bx%5E%5Clambda/%5Clambda%5D%20%5C%5C%0A&amp;=%5Cln%5B%5Ctext%7BVar%7D(x%5E%5Clambda)/%5Clambda%5E2%5D%20%5C%5C%0A&amp;=%5Cln%5Ctext%7BVar%7D(x%5E%5Clambda)%20-%202%5Cln%7C%5Clambda%7C%20%5C%5C%0A%5Cend%7Balign*%7D%0A%5Ctag%7B5%7D"></span></p>
<p>If <img src="https://latex.codecogs.com/png.latex?x"> is scaled by a constant <img src="https://latex.codecogs.com/png.latex?c%20%3E%200">:</p>
<p><span id="eq-boxcox-log-var-mass"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cln%5Ctext%7BVar%7D%5B%5Cpsi_%7B%5Ctext%7BBC%7D%7D(%5Clambda,x/c)%5D%0A&amp;=%5Cln%5Ctext%7BVar%7D%5B(x/c)%5E%5Clambda%5D%20-%202%5Cln%7C%5Clambda%7C%20%5C%5C%0A&amp;=%5Cln%5B%5Ctext%7BVar%7D(x%5E%5Clambda)/c%5E%7B2%5Clambda%7D%5D%20-%202%5Cln%7C%5Clambda%7C%20%5C%5C%0A&amp;=%5Cln%5Ctext%7BVar%7D(x%5E%5Clambda)%20-%202%5Clambda%5Cln%20c%20%20-%202%5Cln%7C%5Clambda%7C%20%5C%5C%0A&amp;=%5Cln%5Ctext%7BVar%7D%5B%5Cpsi_%7B%5Ctext%7BBC%7D%7D(%5Clambda,x)%5D%20-%202%5Clambda%5Cln%20c%20%5C%5C%0A%5Cend%7Balign*%7D%0A%5Ctag%7B6%7D"></span></p>
<p>Plugging into the log−likelihood:</p>
<p><span id="eq-boxcox-llf-mass"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cln%5Cmathcal%7BL%7D_%7B%5Ctext%7BBC%7D%7D(%5Clambda,%20x/c)%0A&amp;=(%5Clambda-1)%20%5Csum_i%5En%20%5Cln(x_i/c)%20-%20%5Cfrac%7Bn%7D%7B2%7D%5Cln%5Ctext%7BVar%7D%5B%5Cpsi_%7B%5Ctext%7BBC%7D%7D(%5Clambda,x/c)%5D%20%5C%5C%0A&amp;=%5Cln%5Cmathcal%7BL%7D_%7B%5Ctext%7BBC%7D%7D(%5Clambda,%20x)%20-%20n(%5Clambda-1)%5Cln%20c%20+%20n%5Clambda%5Cln%20c%20%5C%5C%0A&amp;=%5Cln%5Cmathcal%7BL%7D_%7B%5Ctext%7BBC%7D%7D(%5Clambda,%20x)%20+%20n%5Cln%20c%20%5C%5C%0A%5Cend%7Balign*%7D%0A%5Ctag%7B7%7D"></span></p>
<p>The additive constant <img src="https://latex.codecogs.com/png.latex?n%5Cln%20c"> does not affect the maximizer of <img src="https://latex.codecogs.com/png.latex?%5Clambda">. However, this trick does not apply to Yeo-Johnson, where scaling alters the optimal parameter (see Equation&nbsp;4).</p>
</section>
<section id="log-space-computation" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="log-space-computation"><span class="header-section-number">4</span> Log-Space Computation</h2>
<p>To address numerical instability for both transformations, log-space computation <span class="citation" data-cites="Haberland2023">(Haberland 2023)</span> is effective. It uses the <a href="https://en.wikipedia.org/wiki/LogSumExp">Log-Sum-Exp trick</a> to compute statistics in log space:</p>
<div id="7c29ecf0" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.special <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logsumexp</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> log_mean(logx):</span>
<span id="cb15-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute log of mean of x from log(x)</span></span>
<span id="cb15-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> logsumexp(logx) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.log(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(logx))</span>
<span id="cb15-6"></span>
<span id="cb15-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> log_var(logx):</span>
<span id="cb15-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute log of variance of x from log(x)</span></span>
<span id="cb15-9">    logmean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_mean(logx)</span>
<span id="cb15-10">    pij <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.full_like(logx, np.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span>, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.complex128)</span>
<span id="cb15-11">    logxmu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logsumexp([logx, logmean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pij], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb15-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.real(logsumexp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> logxmu)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.log(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(logx))</span></code></pre></div>
</div>
<p>This allows direct computation of <img src="https://latex.codecogs.com/png.latex?%5Cln%5Csigma%5E2_%5Cpsi"> from <img src="https://latex.codecogs.com/png.latex?%5Cln%20x">. Plugging in Equation&nbsp;5, we can compute the log-likelihood in the log-space.</p>
<div id="aa97ea91" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> boxcox_llf(lmb, x):</span>
<span id="cb16-2">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x)</span>
<span id="cb16-3">    logx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(x)</span>
<span id="cb16-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> lmb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb16-5">        logvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(np.var(logx))</span>
<span id="cb16-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb16-7">        logvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_var(lmb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> logx) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(lmb))</span>
<span id="cb16-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (lmb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(logx) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> logvar</span></code></pre></div>
</div>
<p>This version avoids overflow and reliably returns the optimal <img src="https://latex.codecogs.com/png.latex?%5Clambda">.</p>
<div id="1fd34c8d" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">max_llf(x, llf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>boxcox_llf)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>357.55141245531865</code></pre>
</div>
</div>
<div id="46757965" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">plot_llf(x, lb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">330</span>, ub<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">385</span>, llf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>boxcox_llf)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>llf=[14.175 14.177 14.178 14.179 14.18  14.181 14.182 14.182 14.183 14.183
 14.183 14.183 14.182 14.182 14.181 14.18  14.179 14.178 14.177 14.176]</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://xuefeng-xu.github.io/blog/powertransform_files/figure-html/cell-15-output-2.png" width="392" height="356" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The same principle extends to Yeo-Johnson, even for mixed-sign inputs.</p>
<div id="03f5719f" class="cell" data-execution_count="15">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> log_var_yeojohnson(x, lmb):</span>
<span id="cb21-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb21-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(lmb) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> np.spacing(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>):</span>
<span id="cb21-4">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.log(np.var(np.log1p(x)))</span>
<span id="cb21-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> log_var(lmb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log1p(x)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(lmb))</span>
<span id="cb21-6"></span>
<span id="cb21-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb21-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(lmb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> np.spacing(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>):</span>
<span id="cb21-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.log(np.var(np.log1p(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x)))</span>
<span id="cb21-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> log_var((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lmb) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log1p(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lmb))</span>
<span id="cb21-11"></span>
<span id="cb21-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mixed positive and negtive data</span></span>
<span id="cb21-13">        logyj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros_like(x, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.complex128)</span>
<span id="cb21-14">        pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb21-15"></span>
<span id="cb21-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># when x &gt;= 0</span></span>
<span id="cb21-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(lmb) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> np.spacing(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>):</span>
<span id="cb21-18">            logyj[pos] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(np.log1p(x[pos]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">0j</span>)</span>
<span id="cb21-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lmbda != 0</span></span>
<span id="cb21-20">            logm1_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.full_like(x[pos], np.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span>, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.complex128)</span>
<span id="cb21-21">            logyj[pos] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logsumexp(</span>
<span id="cb21-22">                [lmb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log1p(x[pos]), logm1_pos], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb21-23">            ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.log(lmb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">0j</span>)</span>
<span id="cb21-24"></span>
<span id="cb21-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># when x &lt; 0</span></span>
<span id="cb21-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(lmb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> np.spacing(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>):</span>
<span id="cb21-27">            logyj[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>pos] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.log1p(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>pos]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">0j</span>)</span>
<span id="cb21-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lmbda != 2</span></span>
<span id="cb21-29">            logm1_neg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.full_like(x[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>pos], np.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span>, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.complex128)</span>
<span id="cb21-30">            logyj[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>pos] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logsumexp(</span>
<span id="cb21-31">                [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lmb) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log1p(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>pos]), logm1_neg], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb21-32">            ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.log(lmb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">0j</span>)</span>
<span id="cb21-33"></span>
<span id="cb21-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> log_var(logyj)</span>
<span id="cb21-35"></span>
<span id="cb21-36"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> yeojohnson_llf(lmb, x):</span>
<span id="cb21-37">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x)</span>
<span id="cb21-38">    llf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (lmb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(np.sign(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log1p(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(x)))</span>
<span id="cb21-39">    llf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> log_var_yeojohnson(x, lmb)</span>
<span id="cb21-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> llf</span></code></pre></div>
</details>
</div>
</section>
<section id="constrained-optimization" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="constrained-optimization"><span class="header-section-number">5</span> Constrained Optimization</h2>
<p>Even with log-space computation, applying the transformation using a large absolute value of <img src="https://latex.codecogs.com/png.latex?%5Clambda"> can result in overflow:</p>
<div id="b998aacc" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">lmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_llf(x, llf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>boxcox_llf)</span>
<span id="cb22-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(boxcox(x, lmax))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[inf inf inf inf]</code></pre>
</div>
</div>
<p>To prevent this, we constrain <img src="https://latex.codecogs.com/png.latex?%5Clambda"> so that the transformed values stay within a safe range.</p>
<div id="lem-monotone-increase" class="theorem lemma">
<p><span class="theorem-title"><strong>Lemma 1</strong></span> The transformation <img src="https://latex.codecogs.com/png.latex?%5Cpsi(%5Clambda,x)"> is monotonically increasing in both <img src="https://latex.codecogs.com/png.latex?%5Clambda"> and <img src="https://latex.codecogs.com/png.latex?x"> <span class="citation" data-cites="Yeo1997">(see I.-K. Yeo 1997 for Yeo-Johnson proof)</span>.</p>
</div>
<p>This allows us to bound <img src="https://latex.codecogs.com/png.latex?%5Clambda"> based on <img src="https://latex.codecogs.com/png.latex?%5Cmin(x)"> and <img src="https://latex.codecogs.com/png.latex?%5Cmax(x)">. For Box-Cox, we use <img src="https://latex.codecogs.com/png.latex?x=1"> as a threshold since <img src="https://latex.codecogs.com/png.latex?%5Cpsi_%5Ctext%7BBC%7D(%5Clambda,1)=0">:</p>
<p><span id="eq-boxcox-constraint"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cmax_%5Clambda%20%5Cquad%20&amp;%20%5Cln%5Cmathcal%7BL%7D_%7B%5Ctext%7BBC%7D%7D(%5Clambda,%20x)%20%5C%5C%0A%5Ctextrm%7Bs.t.%7D%20%5Cquad%20&amp;%20%5Ctext%7Bif%20%7D%20x_%7B%5Cmax%7D%3E1,%20%5Clambda%5Cle%5Cpsi%5E%7B-1%7D_%7B%5Ctext%7BBC%7D%7D(x_%7B%5Cmax%7D,y_%7B%5Cmax%7D)%20%5C%5C%0A&amp;%20%5Ctext%7Bif%20%7D%20x_%7B%5Cmin%7D%3C1,%20%5Clambda%5Cge%5Cpsi%5E%7B-1%7D_%7B%5Ctext%7BBC%7D%7D(x_%7B%5Cmin%7D,-y_%7B%5Cmax%7D)%20%5C%5C%0A%5Cend%7Balign*%7D%0A%5Ctag%7B8%7D"></span></p>
<p>The inverse Box−Cox function is given by:</p>
<p><span id="eq-boxcox-inverse"><img src="https://latex.codecogs.com/png.latex?%0A%5Cpsi%5E%7B-1%7D_%7B%5Ctext%7BBC%7D%7D(x,y)=-1/y-W(-x%5E%7B-1/y%7D%5Cln%20x/y)/%5Cln%20x%0A%5Ctag%7B9%7D"></span></p>
<div id="7940ab85" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.special <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> lambertw</span>
<span id="cb24-2"></span>
<span id="cb24-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> boxcox_inv_lmbda(x, y):</span>
<span id="cb24-4">    num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lambertw(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.real(num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.log(x))</span></code></pre></div>
</div>
<div id="fcf3b43a" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> boxcox_constranined_lmax(lmax, x, ymax):</span>
<span id="cb25-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x &gt; 1, boxcox(x) &gt; 0; x &lt; 1, boxcox(x) &lt; 0</span></span>
<span id="cb25-3">    xmin, xmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(x), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(x)</span>
<span id="cb25-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> xmin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb25-5">        x_treme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xmax</span>
<span id="cb25-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> xmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb25-7">        x_treme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xmin</span>
<span id="cb25-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># xmin &lt; 1 &lt; xmax</span></span>
<span id="cb25-9">        indicator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boxcox(xmax, lmax) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(boxcox(xmin, lmax))</span>
<span id="cb25-10">        x_treme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xmax <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> indicator <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> xmin</span>
<span id="cb25-11">    </span>
<span id="cb25-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(boxcox(x_treme, lmax)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ymax:</span>
<span id="cb25-13">        lmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boxcox_inv_lmbda(x_treme, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sign(x_treme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb25-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> lmax</span></code></pre></div>
</div>
<p>This method can be verified by testing different values for <img src="https://latex.codecogs.com/png.latex?y_%7B%5Cmax%7D">:</p>
<div id="1e365efc" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> verify_boxcox_constranined_lmax(x):</span>
<span id="cb26-2">    np.set_printoptions(precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb26-3">    lmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_llf(x, llf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>boxcox_llf)</span>
<span id="cb26-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ymax <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e300</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e100</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e30</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e10</span>]:</span>
<span id="cb26-5">        l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boxcox_constranined_lmax(lmax, x, ymax)</span>
<span id="cb26-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(boxcox(x, l))</span></code></pre></div>
</div>
<div id="365101a8" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Positive overflow</span></span>
<span id="cb27-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.9</span>])</span>
<span id="cb27-3">verify_boxcox_constranined_lmax(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1.000e+300 1.000e+300 1.000e+300 4.783e+298]
[1.000e+100 1.000e+100 1.000e+100 3.587e+099]
[1.000e+30 1.000e+30 1.000e+30 7.286e+29]
[1.00e+10 1.00e+10 1.00e+10 8.95e+09]</code></pre>
</div>
</div>
<div id="f53676b7" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Negative overflow</span></span>
<span id="cb29-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.101</span>])</span>
<span id="cb29-3">verify_boxcox_constranined_lmax(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[-1.00e+300 -1.00e+300 -1.00e+300 -4.93e+298]
[-1.000e+100 -1.000e+100 -1.000e+100 -3.624e+099]
[-1.000e+30 -1.000e+30 -1.000e+30 -7.309e+29]
[-1.000e+10 -1.000e+10 -1.000e+10 -8.959e+09]</code></pre>
</div>
</div>
<p>The constrained optimization approach can also be extended to Yeo-Johnson, ensures overflow-free transformations even for extreme values.</p>
<div id="b8de898c" class="cell" data-execution_count="22">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> yeojohnson_inv_lmbda(x, y):</span>
<span id="cb31-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb31-3">        num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lambertw(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log1p(x)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb31-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.real(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.log1p(x))</span>
<span id="cb31-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb31-6">        num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lambertw(((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log1p(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb31-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.real(num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.log1p(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x))</span>
<span id="cb31-8"></span>
<span id="cb31-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> yeojohnson_constranined_lmax(lmax, x, ymax):</span>
<span id="cb31-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x &gt; 0, yeojohnson(x) &gt; 0; x &lt; 0, yeojohnson(x) &lt; 0</span></span>
<span id="cb31-11">    xmin, xmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(x), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(x)</span>
<span id="cb31-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> xmin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb31-13">        x_treme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xmax</span>
<span id="cb31-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> xmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb31-15">        x_treme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xmin</span>
<span id="cb31-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># xmin &lt; 0 &lt; xmax</span></span>
<span id="cb31-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> np.errstate(over<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore"</span>):</span>
<span id="cb31-18">            indicator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yeojohnson(xmax, lmax) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(yeojohnson(xmin, lmax))</span>
<span id="cb31-19">        x_treme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xmax <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> indicator <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> xmin</span>
<span id="cb31-20"></span>
<span id="cb31-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> np.errstate(over<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore"</span>):</span>
<span id="cb31-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(yeojohnson(x_treme, lmax)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ymax:</span>
<span id="cb31-23">            lmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yeojohnson_inv_lmbda(x_treme, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sign(x_treme))</span>
<span id="cb31-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> lmax</span></code></pre></div>
</details>
</div>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-Box1964" class="csl-entry">
Box, G. E. P., and D. R. Cox. 1964. <span>“An Analysis of Transformations.”</span> <em>Journal of the Royal Statistical Society: Series B (Methodological)</em> 26 (2): 211–43. <a href="https://doi.org/10.1111/j.2517-6161.1964.tb00553.x">https://doi.org/10.1111/j.2517-6161.1964.tb00553.x</a>.
</div>
<div id="ref-Brent2013" class="csl-entry">
Brent, Richard P. 2013. <em>Algorithms for Minimization Without Derivatives</em>. Dover Books on Mathematics. Dover Publications, Incorporated.
</div>
<div id="ref-Haberland2023" class="csl-entry">
Haberland, Matt. 2023. <a href="https://github.com/scipy/scipy/pull/18852#issuecomment-1657858886">https://github.com/scipy/scipy/pull/18852#issuecomment-1657858886</a>.
</div>
<div id="ref-Kouider1995" class="csl-entry">
Kouider, Elies, and Hanfeng Chen. 1995. <span>“Concavity of Box-Cox Log-Likelihood Function.”</span> <em>Statistics &amp; Probability Letters</em> 25 (2): 171–75. <a href="https://doi.org/10.1016/0167-7152(94)00219-X">https://doi.org/10.1016/0167-7152(94)00219-X</a>.
</div>
<div id="ref-Marchand2022" class="csl-entry">
Marchand, Tanguy, Boris Muzellec, Constance Béguier, Jean Ogier du Terrail, and Mathieu Andreux. 2022. <span>“SecureFedYJ: A Safe Feature Gaussianization Protocol for Federated Learning.”</span> In <em>Advances in Neural Information Processing Systems</em>, 35:36585–98. Curran Associates, Inc. <a href="https://doi.org/10.48550/arXiv.2210.01639">https://doi.org/10.48550/arXiv.2210.01639</a>.
</div>
<div id="ref-Venables2002" class="csl-entry">
Venables, W. N., and B. D. Ripley. 2002. <em>Modern Applied Statistics with s</em>. Fourth. New York: Springer. <a href="https://doi.org/10.32614/CRAN.package.MASS">https://doi.org/10.32614/CRAN.package.MASS</a>.
</div>
<div id="ref-Yeo1997" class="csl-entry">
Yeo, In-Kwon. 1997. <span>“A New Family of Power Transformations to Reduce Skewness or Approximate Normality.”</span> PhD thesis, The University of Wisconsin-Madison. <a href="https://www.proquest.com/openview/b7835693052aecd65e635d39a6bd099a/">https://www.proquest.com/openview/b7835693052aecd65e635d39a6bd099a/</a>.
</div>
<div id="ref-Yeo2000" class="csl-entry">
Yeo, In‐Kwon, and Richard A. Johnson. 2000. <span>“A New Family of Power Transformations to Improve Normality or Symmetry.”</span> <em>Biometrika</em> 87 (4): 954–59. <a href="https://doi.org/10.1093/biomet/87.4.954">https://doi.org/10.1093/biomet/87.4.954</a>.
</div>
</div></section></div> ]]></description>
  <category>Statistics</category>
  <category>Python</category>
  <guid>https://xuefeng-xu.github.io/blog/powertransform.html</guid>
  <pubDate>Sun, 13 Apr 2025 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Monotone Piecewise Cubic Interpolation</title>
  <link>https://xuefeng-xu.github.io/blog/pchip.html</link>
  <description><![CDATA[ 





<p>Piecewise Cubic Hermite Interpolating Polynomial (PCHIP) is a cubic spline-based interpolation method designed to preserve monotonicity. See <a href="https://mathworks.com/help/matlab/ref/pchip.html">MATLAB</a> or <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.PchipInterpolator.html">SciPy</a> for the implementation details.</p>
<section id="interpolation-function" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="interpolation-function"><span class="header-section-number">1</span> Interpolation Function</h2>
<p>Given <img src="https://latex.codecogs.com/png.latex?n"> data points <img src="https://latex.codecogs.com/png.latex?(x_1,y_1),%5Cdots,(x_n,y_n)"> with <img src="https://latex.codecogs.com/png.latex?x_1%3C%5Ccdots%3Cx_n">, where <img src="https://latex.codecogs.com/png.latex?y"> is monotonic (either <img src="https://latex.codecogs.com/png.latex?y_i%5Cle%20y_%7Bi+1%7D"> or <img src="https://latex.codecogs.com/png.latex?y_%7Bi+1%7D%5Cge%20y_i">), define:</p>
<p><span id="eq-h-s"><img src="https://latex.codecogs.com/png.latex?%0Ah_i=x_%7Bi+1%7D-x_i,%5C%20s_i=%5Cfrac%7By_%7Bi+1%7D-y_i%7D%7Bh_i%7D%0A%5Ctag%7B1%7D"></span></p>
<p>For <img src="https://latex.codecogs.com/png.latex?x_i%3Cx%3Cx_%7Bi+1%7D">, the interpolation function <img src="https://latex.codecogs.com/png.latex?f(x)"> is a cubic polynomial:</p>
<p><span id="eq-cubic-poly"><img src="https://latex.codecogs.com/png.latex?%0Af(x)=c_0+c_1(x-x_i)+c_2(x-x_i)%5E2+c_3(x-x_i)%5E3%0A%5Ctag%7B2%7D"></span></p>
<p>satisfying:</p>
<p><span id="eq-cubic-poly-cond"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Af(x_i)&amp;=y_i,%20&amp;f(x_%7Bi+1%7D)&amp;=y_%7Bi+1%7D%5C%5C%0Af'(x_i)&amp;=d_i,%20&amp;f'(x_%7Bi+1%7D)&amp;=d_%7Bi+1%7D%0A%5Cend%7Balign*%7D%0A%5Ctag%7B3%7D"></span></p>
<p>Solving for the coefficients:</p>
<p><span id="eq-cubic-poly-coef"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Ac_0&amp;=y_i,%20&amp;c_2&amp;=%5Cfrac%7B3s_i-2d_i-d_%7Bi+1%7D%7D%7Bh_i%7D%5C%5C%0Ac_1&amp;=d_i,%20&amp;c_3&amp;=%5Cfrac%7B-2s_i+d_i+d_%7Bi+1%7D%7D%7Bh_i%5E2%7D%5C%5C%0A%5Cend%7Balign*%7D%0A%5Ctag%7B4%7D"></span></p>
<p>Thus, computing derivatives <img src="https://latex.codecogs.com/png.latex?d_1,%5Cdots,d_n"> determines <img src="https://latex.codecogs.com/png.latex?c_0,c_1,c_2,c_3"> for each interval.</p>
</section>
<section id="derivative-computation" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="derivative-computation"><span class="header-section-number">2</span> Derivative Computation</h2>
<p>The derivative at <img src="https://latex.codecogs.com/png.latex?x_i"> is computed using local information from three neighboring points <span class="citation" data-cites="Fritsch1984">(Fritsch and Butland 1984)</span>:</p>
<p><span id="eq-d"><img src="https://latex.codecogs.com/png.latex?%0Ad_i=G(s_%7Bi-1%7D,s_i,h_%7Bi-1%7D,h_i)=%0A%5Cbegin%7Bcases%7D%0A%5Cfrac%7Bs_%7Bi-1%7Ds_i%7D%7Brs_i+(1-r)s_%7Bi-1%7D%7D%20&amp;%20%5Cmathrm%7Bif~%7Ds_%7Bi-1%7Ds_i%3E0,%20%5C%5C%0A0%20&amp;%20%5Ctext%7Botherwise%7D%20&amp;%0A%5Cend%7Bcases%7D%0A%5Ctag%7B5%7D"></span></p>
<p>where the ratio <img src="https://latex.codecogs.com/png.latex?r"> (<img src="https://latex.codecogs.com/png.latex?1/3%3Cr%3C2/3">) is given by:</p>
<p><span id="eq-r"><img src="https://latex.codecogs.com/png.latex?%0Ar=%5Cfrac%7Bh_%7Bi-1%7D+2h_i%7D%7B3h_%7Bi-1%7D+3h_i%7D=%5Cfrac%7B1%7D%7B3%7D%5CBig(1+%5Cfrac%7Bh_i%7D%7Bh_%7Bi+1%7D+h_i%7D%5CBig)%0A%5Ctag%7B6%7D"></span></p>
<p>If <img src="https://latex.codecogs.com/png.latex?s_%7Bi-1%7D"> and <img src="https://latex.codecogs.com/png.latex?s_i"> have opposite signs (indicating non-monotonicity) or one is zero, then <img src="https://latex.codecogs.com/png.latex?d_i=0">. Otherwise, <img src="https://latex.codecogs.com/png.latex?d_i"> is a weighted harmonic mean:</p>
<p><span id="eq-harmonic-mean"><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B1%7D%7Bd_i%7D=%5Cfrac%7Br%7D%7Bs_%7Bi-1%7D%7D+%5Cfrac%7B1-r%7D%7Bs_i%7D%0A%5Ctag%7B7%7D"></span></p>
<p>For endpoints <img src="https://latex.codecogs.com/png.latex?x_1"> and <img src="https://latex.codecogs.com/png.latex?x_n">, derivatives are computed separately <span class="citation" data-cites="Moler2004">(Moler 2004, chap. 3)</span>:</p>
<p><span id="eq-d1"><img src="https://latex.codecogs.com/png.latex?%0Ad_1=%0A%5Cbegin%7Bcases%7D%0A0%20&amp;%20%5Cmathrm%7Bif~%7D%5Ctext%7Bsgn%7D(%5Chat%7Bd%7D_1)%5Cneq%20%5Ctext%7Bsgn%7D(s_1),%20%5C%5C%0A3s_1%20&amp;%20%5Cmathrm%7Bif~%7D%5Ctext%7Bsgn%7D(s_1)%5Cneq%20%5Ctext%7Bsgn%7D(s_2)%20%5Cland%7C%5Chat%7Bd%7D_1%7C%3E3%7Cs_1%7C,%5C%5C%0A%5Chat%7Bd%7D_1%20&amp;%20%5Ctext%7Botherwise%7D%20&amp;%0A%5Cend%7Bcases%7D%0A%5Ctag%7B8%7D"></span></p>
<p>where:</p>
<p><span id="eq-hat-d1"><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7Bd%7D_1=%5Cfrac%7B(2h_1+h_2)s_1%20-%20h_1s_2%7D%7B%7Bh_1+h_2%7D%7D%0A%5Ctag%7B9%7D"></span></p>
<p>A quadratic polynomial <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D(x)=%5Chat%7Bc%7D_0+%5Chat%7Bc%7D_1x+%5Chat%7Bc%7D_2x%5E2"> is fit through the first three points, and its derivative at <img src="https://latex.codecogs.com/png.latex?x_1"> is computed to obtain <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bd%7D_1">. Additional rules are then applied to preserve monotonicity. Similar rules apply for <img src="https://latex.codecogs.com/png.latex?d_n">.</p>
</section>
<section id="monotonicity-conditions" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="monotonicity-conditions"><span class="header-section-number">3</span> Monotonicity Conditions</h2>
<p>To ensure monotonicity, define:</p>
<p><span id="eq-alpha-beta"><img src="https://latex.codecogs.com/png.latex?%0A%5Calpha_i=%5Cfrac%7Bd_i%7D%7Bs_i%7D,%5C%0A%5Cbeta_i=%5Cfrac%7Bd_%7Bi+1%7D%7D%7Bs_i%7D%0A%5Ctag%7B10%7D"></span></p>
<div id="lem-monotone-cond" class="theorem lemma">
<p><span class="theorem-title"><strong>Lemma 1</strong></span> A sufficient condition for monotonicity is <span class="citation" data-cites="Fritsch1980">(Fritsch and Carlson 1980)</span>:</p>
<p><span id="eq-monotone-cond"><img src="https://latex.codecogs.com/png.latex?%0A%5Calpha_i,%5Cbeta_i%5Cge0%0A%5Cland%0A%5CBig(%0A%5Calpha_i,%5Cbeta_i%5Cle3%0A%5Clor%0A%5Cphi(%5Calpha_i,%5Cbeta_i)%5Cge0%0A%5CBig)%0A%5Ctag%7B11%7D"></span></p>
<p>where:</p>
<p><span id="eq-phi-alpha-beta"><img src="https://latex.codecogs.com/png.latex?%0A%5Cphi(%5Calpha,%5Cbeta)=%5Calpha-%5Cfrac%7B(2%5Calpha+%5Cbeta-3)%5E2%7D%7B3(%5Calpha+%5Cbeta-2)%7D%0A%5Ctag%7B12%7D"></span></p>
</div>
<p>If <img src="https://latex.codecogs.com/png.latex?s_%7Bi-1%7Ds_i%3E0">, then <img src="https://latex.codecogs.com/png.latex?%5Calpha_i%3E0">; otherwise, <img src="https://latex.codecogs.com/png.latex?%5Calpha_i=0">. Since the ratio <img src="https://latex.codecogs.com/png.latex?r"> satisfies <img src="https://latex.codecogs.com/png.latex?1/3%3Cr%3C2/3">, <img src="https://latex.codecogs.com/png.latex?%5Calpha_i"> is upper-bounded by 3:</p>
<p><span id="eq-alpha-ub"><img src="https://latex.codecogs.com/png.latex?%0A%5Calpha_i%0A=%5Cfrac%7B1%7D%7Brs_i/s_%7Bi-1%7D+(1-r)%7D%0A%3C%5Cfrac%7B1%7D%7B1-r%7D%3C3%0A%5Ctag%7B13%7D"></span></p>
<p>For endpoint <img src="https://latex.codecogs.com/png.latex?%5Calpha_1">, we only need to show the condition of <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bsgn%7D(%5Chat%7Bd%7D_1)=%5Ctext%7Bsgn%7D(s_1)=%5Ctext%7Bsgn%7D(s_2)">, since other conditions already lie within the region <img src="https://latex.codecogs.com/png.latex?%5B0,3%5D">.</p>
<p><span id="eq-alpha1-ub"><img src="https://latex.codecogs.com/png.latex?%0A%5Calpha_1%0A=1+%5Cfrac%7B1-s_2/s_1%7D%7B1+h_2/h_1%7D%3C2%0A%5Ctag%7B14%7D"></span></p>
<p>Similarly, <img src="https://latex.codecogs.com/png.latex?%5Cbeta_i"> and endpoint <img src="https://latex.codecogs.com/png.latex?%5Cbeta_%7Bn-1%7D"> all satisfy the monotonicity condition.</p>
</section>
<section id="proof-of-monotonicity-conditions" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="proof-of-monotonicity-conditions"><span class="header-section-number">4</span> Proof of Monotonicity Conditions</h2>
<div class="proof">
<p><span class="proof-title"><em>Proof</em>. </span>To preserve monotonicity, the derivatives <img src="https://latex.codecogs.com/png.latex?d_i"> and <img src="https://latex.codecogs.com/png.latex?d_%7Bi+1%7D"> must align with the direction of the slope of the interval <img src="https://latex.codecogs.com/png.latex?s_i">. This is a necessary condition <span class="citation" data-cites="Fritsch1980">(Fritsch and Carlson 1980)</span>:</p>
<p><span id="eq-monotone-cond-alpha-beta"><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Bsgn%7D(d_i)=%5Ctext%7Bsgn%7D(d_%7Bi+1%7D)=%5Ctext%7Bsgn%7D(s_i)%0A%5CLeftrightarrow%0A%5Calpha_i,%5Cbeta_i%5Cge0%0A%5Ctag%7B15%7D"></span></p>
<p>The derivative of <img src="https://latex.codecogs.com/png.latex?f(x)"> is a quadratic polynomial:</p>
<p><span id="eq-cubic-poly-derivative"><img src="https://latex.codecogs.com/png.latex?%0Af'(x)=c_1+%0A2c_2(x-x_i)+%0A3c_3(x-x_i)%5E2%0A%5Ctag%7B16%7D"></span></p>
<p>It has a unique extremum at:</p>
<p><span id="eq-x-extrem"><img src="https://latex.codecogs.com/png.latex?%0Ax%5E*=x_i+%5Cfrac%7Bh_i%7D%7B3%7D%5Ccdot%5Cfrac%7B2%5Calpha_i+%5Cbeta_i-3%7D%7B%5Calpha_i+%5Cbeta_i-2%7D%0A%5Ctag%7B17%7D"></span></p>
<p>and</p>
<p><span id="eq-y-extrem"><img src="https://latex.codecogs.com/png.latex?%0Af'(x%5E*)=%5Cphi(%5Calpha_i,%5Cbeta_i)s_i%0A%5Ctag%7B18%7D"></span></p>
<p>There are three conditions to check: 1) <img src="https://latex.codecogs.com/png.latex?x%5E*%3Cx_i">; 2) <img src="https://latex.codecogs.com/png.latex?x%5E*%3Ex_%7Bi+1%7D">; 3) <img src="https://latex.codecogs.com/png.latex?x_i%5Cle%20x%5E*%5Cle%20x_%7Bi+1%7D">.</p>
<p>Condition 1) is equivalent to <span id="eq-monotone-cond-1"><img src="https://latex.codecogs.com/png.latex?%0A%5Calpha_i,%5Cbeta_i%5Cge0%0A%5Cland%0A%5Cfrac%7B2%5Calpha_i+%5Cbeta_i-3%7D%7B%5Calpha_i+%5Cbeta_i-2%7D%3C0%0A%5Ctag%7B19%7D"></span></p>
<p>The analysis of Condition 2) and 3) are similar, leading to:</p>
<p><span id="eq-monotone-cond-2"><img src="https://latex.codecogs.com/png.latex?%0A%5Calpha_i,%5Cbeta_i%5Cge0%0A%5Cland%0A%5Cfrac%7B%5Calpha_i+2%5Cbeta_i-3%7D%7B%5Calpha_i+%5Cbeta_i-2%7D%3C0%0A%5Ctag%7B20%7D"></span></p>
<p>and</p>
<p><span id="eq-monotone-cond-2"><img src="https://latex.codecogs.com/png.latex?%0A%5Calpha_i,%5Cbeta_i%5Cge0%0A%5Cland%0A%5Cfrac%7B2%5Calpha_i+%5Cbeta_i-3%7D%7B%5Calpha_i+%5Cbeta_i-2%7D%5Cge0%0A%5Cland%0A%5Cfrac%7B%5Calpha_i+2%5Cbeta_i-3%7D%7B%5Calpha_i+%5Cbeta_i-2%7D%5Cge0%0A%5Cland%0A%5Cphi(%5Calpha_i,%5Cbeta_i)%5Cge0%0A%5Ctag%7B21%7D"></span></p>
<p>Figure&nbsp;1 illustrates these conditions separately: Condition 1) — blue, Condition 2) — green, Condition 3) — red.</p>
<div id="cell-fig-monotone-region" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"></span>
<span id="cb1-4">x_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-5">y_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-6">x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.meshgrid(x_vals, y_vals)</span>
<span id="cb1-7"></span>
<span id="cb1-8">cond1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> ((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-9">cond2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> ((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-10">cond3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb1-11">    (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> ((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> ((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-16">)</span>
<span id="cb1-17"></span>
<span id="cb1-18">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb1-19"></span>
<span id="cb1-20">ax.contourf(x, y, cond1, levels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>], alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-21">ax.contourf(x, y, cond2, levels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>], alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb1-22">ax.contourf(x, y, cond3, levels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>], alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb1-23"></span>
<span id="cb1-24">ax.set_xlabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\alpha$"</span>)</span>
<span id="cb1-25">ax.set_ylabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\beta$"</span>)</span>
<span id="cb1-26">ax.set_xlim([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb1-27">ax.set_ylim([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb1-28">ax.xaxis.set_ticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)))</span>
<span id="cb1-29">ax.yaxis.set_ticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)))</span>
<span id="cb1-30"></span>
<span id="cb1-31">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-32">ax.tick_params(</span>
<span id="cb1-33">    bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-34">    top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-35">    left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-36">    right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-37">    labelbottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-38">    labeltop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-39">    labelleft<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-40">    labelright<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-41">)</span>
<span id="cb1-42">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="fig-monotone-region" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-monotone-region-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://xuefeng-xu.github.io/blog/pchip_files/figure-html/fig-monotone-region-output-1.png" width="398" height="378" class="figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-monotone-region-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: The monotonicity region
</figcaption>
</figure>
</div>
</div>
</div>
<p>Finally, simplifying yields the final monotonicity condition (Lemma&nbsp;1).</p>
</div>
</section>
<section id="cubic-hermite-interpolation" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="cubic-hermite-interpolation"><span class="header-section-number">5</span> Cubic Hermite Interpolation</h2>
<p>Cubic Hermite Interpolation constructs <img src="https://latex.codecogs.com/png.latex?f(x)"> using both function values and derivatives:</p>
<p><span id="eq-cubic-hermite"><img src="https://latex.codecogs.com/png.latex?%0Af(x)=y_iH_1(x)+y_%7Bi+1%7DH_2(x)+d_iH_3(x)+d_%7Bi+1%7DH_4(x)%0A%5Ctag%7B22%7D"></span></p>
<p>where basis functions are:</p>
<p><span id="eq-cubic-hermite-basis"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AH_%7B1%7D(x)&amp;=%5Cphi%5CBig(%5Cfrac%7Bx_%7Bi+1%7D-x%7D%7Bh_%7Bi%7D%7D%5CBig),%20&amp;H_%7B2%7D(x)&amp;=%5Cphi%5CBig(%5Cfrac%7Bx-x_%7Bi%7D%7D%7Bh_%7Bi%7D%7D%5CBig)%5C%5C%0AH_%7B3%7D(x)&amp;=-h_%7Bi%7D%5Cpsi%5CBig(%5Cfrac%7Bx_%7Bi+1%7D-x%7D%7Bh_%7Bi%7D%7D%5CBig),%20&amp;H_%7B4%7D(x)&amp;=h_%7Bi%7D%5Cpsi%5CBig(%5Cfrac%7Bx-x_%7Bi%7D%7D%7Bh_%7Bi%7D%7D%5CBig)%0A%5Cend%7Balign*%7D%0A%5Ctag%7B23%7D"></span></p>
<p>with:</p>
<p><span id="eq-phi-psi"><img src="https://latex.codecogs.com/png.latex?%0A%5Cphi(t)=3t%5E%7B2%7D-2t%5E%7B3%7D,%5C%20%20%5Cpsi(t)=t%5E%7B3%7D-t%5E%7B2%7D%0A%5Ctag%7B24%7D"></span></p>
<p>This formulation aligns with the cubic polynomial definition above.</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-Fritsch1984" class="csl-entry">
Fritsch, F. N., and J. Butland. 1984. <span>“A Method for Constructing Local Monotone Piecewise Cubic Interpolants.”</span> <em>SIAM Journal on Scientific and Statistical Computing</em> 5 (2): 300–304. <a href="https://doi.org/10.1137/0905021">https://doi.org/10.1137/0905021</a>.
</div>
<div id="ref-Fritsch1980" class="csl-entry">
Fritsch, F. N., and R. E. Carlson. 1980. <span>“Monotone Piecewise Cubic Interpolation.”</span> <em>SIAM Journal on Numerical Analysis</em> 17 (2): 238–46. <a href="https://doi.org/10.1137/0717021">https://doi.org/10.1137/0717021</a>.
</div>
<div id="ref-Moler2004" class="csl-entry">
Moler, Cleve B. 2004. <em>Numerical Computing with Matlab</em>. Society for Industrial; Applied Mathematics. <a href="https://doi.org/10.1137/1.9780898717952.ch3">https://doi.org/10.1137/1.9780898717952.ch3</a>.
</div>
</div></section></div> ]]></description>
  <category>Statistics</category>
  <guid>https://xuefeng-xu.github.io/blog/pchip.html</guid>
  <pubDate>Thu, 13 Mar 2025 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
