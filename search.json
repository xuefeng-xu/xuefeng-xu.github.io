[
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "Xuefeng Xu",
    "section": "",
    "text": "University of Warwick | Coventry, UK Ph.D. in Computer Science | September 2024 - Present\n\n\nBeihang University | Beijing, China M.E. in Cyberspace Security | September 2019 - January 2022\n\n\nJilin University | Changchun, China B.E. in Communication Engineering | September 2015 - July 2019"
  },
  {
    "objectID": "cv.html#education",
    "href": "cv.html#education",
    "title": "Xuefeng Xu",
    "section": "",
    "text": "University of Warwick | Coventry, UK Ph.D. in Computer Science | September 2024 - Present\n\n\nBeihang University | Beijing, China M.E. in Cyberspace Security | September 2019 - January 2022\n\n\nJilin University | Changchun, China B.E. in Communication Engineering | September 2015 - July 2019"
  },
  {
    "objectID": "cv.html#experience",
    "href": "cv.html#experience",
    "title": "Xuefeng Xu",
    "section": "Experience",
    "text": "Experience\n\n\nPrimiHub | Beijing, China Privacy Engineer | December 2022 - August 2024\n\n\nOPPO | Shenzhen, China Machine Learning Intern | May 2022 - August 2022"
  },
  {
    "objectID": "cv.html#research",
    "href": "cv.html#research",
    "title": "Xuefeng Xu",
    "section": "Research",
    "text": "Research\n\n\nFedPS: Federated data Preprocessing via aggregated Statistics Code\n\n\nDeep Learning Algorithms Design and Implementation Based on Differential Privacy Xuefeng Xu, Yanqing Yao, and Lei Cheng International Conference on Machine Learning for Cyber Security, 2020"
  },
  {
    "objectID": "cv.html#teaching",
    "href": "cv.html#teaching",
    "title": "Xuefeng Xu",
    "section": "Teaching",
    "text": "Teaching\n\n@ University of Warwick\n\nCS429/CS909 Data Mining: Spring 2025\nCS133 Professional Skills: Fall 2024\n\n\n\n@ Beihang University\n\n39112201 Abstract Algebra: Fall 2019"
  },
  {
    "objectID": "cv.html#service",
    "href": "cv.html#service",
    "title": "Xuefeng Xu",
    "section": "Service",
    "text": "Service\n\nConference Reviewer: ICLR 2025"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Xuefeng Xu",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nMonotone Piecewise Cubic Interpolation\n\n\n\n\n\n\nStatistics\n\n\n\n\n\n\n\n\n\nMar 13, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Xuefeng Xu 许雪峰",
    "section": "",
    "text": "Biography\nI am a Ph.D. student in the Department of Computer Science at the University of Warwick, supervised by Prof. Graham Cormode. I also work with Prof. Hakan Ferhatosmanoglu. My research focuses on Privacy and Security, particularly Differential Privacy and Machine Learning. I hold an M.E. degree from Beihang University and a B.E. degree from Jilin University.\n\n\nNews\n\n03/2025: Online Talk at Flower AI Summit 2025"
  },
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "Xuefeng Xu",
    "section": "",
    "text": "FedPS: Federated data Preprocessing via aggregated Statistics Code\n\n\nDeep Learning Algorithms Design and Implementation Based on Differential Privacy Xuefeng Xu, Yanqing Yao, and Lei Cheng International Conference on Machine Learning for Cyber Security, 2020"
  },
  {
    "objectID": "misc/index.html",
    "href": "misc/index.html",
    "title": "Xuefeng Xu",
    "section": "",
    "text": "Stop PP10043 !\nStudy Resources"
  },
  {
    "objectID": "misc/resource.html",
    "href": "misc/resource.html",
    "title": "Xuefeng Xu",
    "section": "",
    "text": "Books\n\nIntroduction to Linear Algebra\nAlgorithms\nNumerical Recipes: The Art of Scientific Computing\nPattern Recognition and Machine Learning\nThe Elements of Statistical Learning\nProbabilistic Machine Learning\nFoundations of Machine Learning\nThe Algorithmic Foundations of Differential Privacy\nThe Complexity of Differential Privacy\nIntroduction to Modern Cryptography\nEffective Python\n\n\n\nCourses\n\nMIT 18.06 Linear Algebra\nCoursera Algorithms Part 1 and Part 2\nStanford CS229 Machine Learning\nCoursera Deep Learning Specialization\nCoursera Cryptography\nMIT The Missing Semester of Your CS Education"
  },
  {
    "objectID": "blog/pchip.html",
    "href": "blog/pchip.html",
    "title": "Monotone Piecewise Cubic Interpolation",
    "section": "",
    "text": "Piecewise Cubic Hermite Interpolating Polynomial (PCHIP) is a cubic spline-based interpolation method designed to preserve monotonicity. See MATLAB or SciPy for the implementation details."
  },
  {
    "objectID": "blog/pchip.html#interpolation-function",
    "href": "blog/pchip.html#interpolation-function",
    "title": "Monotone Piecewise Cubic Interpolation",
    "section": "1 Interpolation Function",
    "text": "1 Interpolation Function\nGiven n data points (x_1,y_1),\\dots,(x_n,y_n) with x_1&lt;\\cdots&lt;x_n, where y is monotonic (either y_i\\le y_{i+1} or y_{i+1}\\ge y_i), define:\n\nh_i=x_{i+1}-x_i,\\ s_i=\\frac{y_{i+1}-y_i}{h_i}\n\\tag{1}\nFor x_i&lt;x&lt;x_{i+1}, the interpolation function f(x) is a cubic polynomial:\n\nf(x)=c_0+c_1(x-x_i)+c_2(x-x_i)^2+c_3(x-x_i)^3\n\\tag{2}\nsatisfying:\n\n\\begin{align*}\nf(x_i)&=y_i, &f(x_{i+1})&=y_{i+1}\\\\\nf'(x_i)&=d_i, &f'(x_{i+1})&=d_{i+1}\n\\end{align*}\n\\tag{3}\nSolving for the coefficients:\n\n\\begin{align*}\nc_0&=y_i, &c_2&=\\frac{3s_i-2d_i-d_{i+1}}{h_i}\\\\\nc_1&=d_i, &c_3&=\\frac{-2s_i+d_i+d_{i+1}}{h_i^2}\\\\\n\\end{align*}\n\\tag{4}\nThus, computing derivatives d_1,\\dots,d_n determines c_0,c_1,c_2,c_3 for each interval."
  },
  {
    "objectID": "blog/pchip.html#derivative-computation",
    "href": "blog/pchip.html#derivative-computation",
    "title": "Monotone Piecewise Cubic Interpolation",
    "section": "2 Derivative Computation",
    "text": "2 Derivative Computation\nThe derivative at x_i is computed using local information from three neighboring points (Fritsch and Butland 1984):\n\nd_i=G(s_{i-1},s_i,h_{i-1},h_i)=\n\\begin{cases}\n\\frac{s_{i-1}s_i}{rs_i+(1-r)s_{i-1}} & \\mathrm{if~}s_{i-1}s_i&gt;0, \\\\\n0 & \\text{otherwise} &\n\\end{cases}\n\\tag{5}\nwhere the ratio r (1/3&lt;r&lt;2/3) is given by:\n\nr=\\frac{h_{i-1}+2h_i}{3h_{i-1}+3h_i}=\\frac{1}{3}\\Big(1+\\frac{h_i}{h_{i+1}+h_i}\\Big)\n\\tag{6}\nIf s_{i-1} and s_i have opposite signs (indicating non-monotonicity) or one is zero, then d_i=0. Otherwise, d_i is a weighted harmonic mean:\n\n\\frac{1}{d_i}=\\frac{r}{s_{i-1}}+\\frac{1-r}{s_i}\n\\tag{7}\nFor endpoints x_1 and x_n, derivatives are computed separately (Moler 2004, chap. 3):\n\nd_1=\n\\begin{cases}\n0 & \\mathrm{if~}\\text{sgn}(\\hat{d}_1)\\neq \\text{sgn}(s_1), \\\\\n3s_1 & \\mathrm{if~}\\text{sgn}(s_1)\\neq \\text{sgn}(s_2) \\land|\\hat{d}_1|&gt;3|s_1|,\\\\\n\\hat{d}_1 & \\text{otherwise} &\n\\end{cases}\n\\tag{8}\nwhere:\n\n\\hat{d}_1=\\frac{(2h_1+h_2)s_1 - h_1s_2}{{h_1+h_2}}\n\\tag{9}\nA quadratic polynomial \\hat{f}(x)=\\hat{c}_0+\\hat{c}_1x+\\hat{c}_2x^2 is fit through the first three points, and its derivative at x_1 is computed to obtain \\hat{d}_1. Additional rules are then applied to preserve monotonicity. Similar rules apply for d_n."
  },
  {
    "objectID": "blog/pchip.html#monotonicity-conditions",
    "href": "blog/pchip.html#monotonicity-conditions",
    "title": "Monotone Piecewise Cubic Interpolation",
    "section": "3 Monotonicity Conditions",
    "text": "3 Monotonicity Conditions\nTo ensure monotonicity, define:\n\n\\alpha_i=\\frac{d_i}{s_i},\\\n\\beta_i=\\frac{d_{i+1}}{s_i}\n\\tag{10}\n\nLemma 1 A sufficient condition for monotonicity is (Fritsch and Carlson 1980):\n\n\\alpha_i,\\beta_i\\ge0\n\\land\n\\Big(\n\\alpha_i,\\beta_i\\le3\n\\lor\n\\phi(\\alpha_i,\\beta_i)\\ge0\n\\Big)\n\\tag{11}\nwhere:\n\n\\phi(\\alpha,\\beta)=\\alpha-\\frac{(2\\alpha+\\beta-3)^2}{3(\\alpha+\\beta-2)}\n\\tag{12}\n\nIf s_{i-1}s_i&gt;0, then \\alpha_i&gt;0; otherwise, \\alpha_i=0. Since the ratio r satisfies 1/3&lt;r&lt;2/3, \\alpha_i is upper-bounded by 3:\n\n\\alpha_i\n=\\frac{1}{rs_i/s_{i-1}+(1-r)}\n&lt;\\frac{1}{1-r}&lt;3\n\\tag{13}\nFor endpoint \\alpha_1, we only need to show the condition of \\text{sgn}(\\hat{d}_1)=\\text{sgn}(s_1)=\\text{sgn}(s_2), since other conditions already lie within the region [0,3].\n\n\\alpha_1\n=1+\\frac{1-s_2/s_1}{1+h_2/h_1}&lt;2\n\\tag{14}\nSimilarly, \\beta_i and endpoint \\beta_{n-1} all satisfy the monotonicity condition."
  },
  {
    "objectID": "blog/pchip.html#proof-of-monotonicity-conditions",
    "href": "blog/pchip.html#proof-of-monotonicity-conditions",
    "title": "Monotone Piecewise Cubic Interpolation",
    "section": "4 Proof of Monotonicity Conditions",
    "text": "4 Proof of Monotonicity Conditions\n\nProof. To preserve monotonicity, the derivatives d_i and d_{i+1} must align with the direction of the slope of the interval s_i. This is a necessary condition (Fritsch and Carlson 1980):\n\n\\text{sgn}(d_i)=\\text{sgn}(d_{i+1})=\\text{sgn}(s_i)\n\\Leftrightarrow\n\\alpha_i,\\beta_i\\ge0\n\\tag{15}\nThe derivative of f(x) is a quadratic polynomial:\n\nf'(x)=c_1+\n2c_2(x-x_i)+\n3c_3(x-x_i)^2\n\\tag{16}\nIt has a unique extremum at:\n\nx^*=x_i+\\frac{h_i}{3}\\cdot\\frac{2\\alpha_i+\\beta_i-3}{\\alpha_i+\\beta_i-2}\n\\tag{17}\nand\n\nf'(x^*)=\\phi(\\alpha_i,\\beta_i)s_i\n\\tag{18}\nThere are three conditions to check: 1) x^*&lt;x_i; 2) x^*&gt;x_{i+1}; 3) x_i\\le x^*\\le x_{i+1}.\nCondition 1) is equivalent to \n\\alpha_i,\\beta_i\\ge0\n\\land\n\\frac{2\\alpha_i+\\beta_i-3}{\\alpha_i+\\beta_i-2}&lt;0\n\\tag{19}\nThe analysis of Condition 2) and 3) are similar, leading to:\n\n\\alpha_i,\\beta_i\\ge0\n\\land\n\\frac{\\alpha_i+2\\beta_i-3}{\\alpha_i+\\beta_i-2}&lt;0\n\\tag{20}\nand\n\n\\alpha_i,\\beta_i\\ge0\n\\land\n\\frac{2\\alpha_i+\\beta_i-3}{\\alpha_i+\\beta_i-2}\\ge0\n\\land\n\\frac{\\alpha_i+2\\beta_i-3}{\\alpha_i+\\beta_i-2}\\ge0\n\\land\n\\phi(\\alpha_i,\\beta_i)\\ge0\n\\tag{21}\nFigure 1 illustrates these conditions separately: Condition 1) — blue, Condition 2) — green, Condition 3) — red.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx_vals = np.linspace(0, 4, 1000)\ny_vals = np.linspace(0, 4, 1000)\nx, y = np.meshgrid(x_vals, y_vals)\n\ncond1 = (x &gt; 0) & (y &gt; 0) & ((2 * x + y - 3) / (x + y - 2) &lt; 0)\ncond2 = (x &gt; 0) & (y &gt; 0) & ((x + 2 * y - 3) / (x + y - 2) &lt; 0)\ncond3 = (\n    (x &gt; 0)\n    & (y &gt; 0)\n    & ((2 * x + y - 3) / (x + y - 2) &gt; 0)\n    & ((x + 2 * y - 3) / (x + y - 2) &gt; 0)\n    & (x - ((2 * x + y - 3) ** 2) / (3 * (x + y - 2)) &gt; 0)\n)\n\nfig, ax = plt.subplots(figsize=(4, 4))\n\nax.contourf(x, y, cond1, levels=1, colors=[\"white\", \"blue\"], alpha=1)\nax.contourf(x, y, cond2, levels=1, colors=[\"white\", \"green\"], alpha=0.5)\nax.contourf(x, y, cond3, levels=1, colors=[\"white\", \"red\"], alpha=0.25)\n\nax.set_xlabel(r\"$\\alpha$\")\nax.set_ylabel(r\"$\\beta$\")\nax.set_xlim([0, 4])\nax.set_ylim([0, 4])\nax.xaxis.set_ticks(list(np.arange(0, 4.5, 0.5)))\nax.yaxis.set_ticks(list(np.arange(0, 4.5, 0.5)))\n\nax.grid(True)\nax.tick_params(\n    bottom=True,\n    top=True,\n    left=True,\n    right=True,\n    labelbottom=True,\n    labeltop=True,\n    labelleft=True,\n    labelright=True,\n)\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: The monotonicity region\n\n\n\n\n\nFinally, simplifying yields the final monotonicity condition (Lemma 1)."
  },
  {
    "objectID": "blog/pchip.html#cubic-hermite-interpolation",
    "href": "blog/pchip.html#cubic-hermite-interpolation",
    "title": "Monotone Piecewise Cubic Interpolation",
    "section": "5 Cubic Hermite Interpolation",
    "text": "5 Cubic Hermite Interpolation\nCubic Hermite Interpolation constructs f(x) using both function values and derivatives:\n\nf(x)=y_iH_1(x)+y_{i+1}H_2(x)+d_iH_3(x)+d_{i+1}H_4(x)\n\\tag{22}\nwhere basis functions are:\n\n\\begin{align*}\nH_{1}(x)&=\\phi\\Big(\\frac{x_{i+1}-x}{h_{i}}\\Big), &H_{2}(x)&=\\phi\\Big(\\frac{x-x_{i}}{h_{i}}\\Big)\\\\\nH_{3}(x)&=-h_{i}\\psi\\Big(\\frac{x_{i+1}-x}{h_{i}}\\Big), &H_{4}(x)&=h_{i}\\psi\\Big(\\frac{x-x_{i}}{h_{i}}\\Big)\n\\end{align*}\n\\tag{23}\nwith:\n\n\\phi(t)=3t^{2}-2t^{3},\\  \\psi(t)=t^{3}-t^{2}\n\\tag{24}\nThis formulation aligns with the cubic polynomial definition above."
  },
  {
    "objectID": "teach.html",
    "href": "teach.html",
    "title": "Xuefeng Xu",
    "section": "",
    "text": "@ University of Warwick\n\nCS429/CS909 Data Mining: Spring 2025\nCS133 Professional Skills: Fall 2024\n\n\n\n@ Beihang University\n\n39112201 Abstract Algebra: Fall 2019"
  }
]